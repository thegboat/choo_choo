      string = "#{str}"
      isa = edit_line(test_message, 1, string)
      expect(isa.errors.include?("WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT")).to eq(true)
    end
  }
end
exit
xx = ChooChoo.test_string
ar = xx.split('~')
ChooChoo::EDI835.valid_segments.to_a.each do |seg|
  str = ar.detect {|s| s =~ /^#{seg}/}
  i = ar.index(str)
  next unless str
  str = str.gsub(/^#{seg}/, "#{seg}*extra_element*")
  puts %{
    it "handles WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT" do
      string = "#{str}"
      isa = edit_line(test_message, #{i}, string)
      expect(isa.errors.include?("WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT")).to eq(true)
    end
  }
end
exit
xx = ChooChoo.test_string
ar = xx.split('~')
ChooChoo::EDI835.valid_segments.to_a.each do |seg|
  str = ar.detect {|s| s =~ /^#{seg}/}
  i = ar.index(str)
  next unless str
  str = str.gsub(/^#{seg}/, "#{seg}*extra_element*")
  puts %{
    it "handles WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT" do
      string = "#{str}"
      isa = edit_line(test_message, #{i+1}, string)
      expect(isa.errors.include?("WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT")).to eq(true)
    end
  }
end
exit
xx = ChooChoo.test_string
ar = xx.split('~')
ChooChoo::EDI835.valid_segments.to_a.each do |seg|
  str = ar.detect {|s| s =~ /^#{seg}/}
  i = ar.index(str)
  next unless str
  str = str.gsub(/^#{seg}/, ("#{seg}" << '*'*30))
  puts %{
    it "handles WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT" do
      string = "#{str}"
      isa = edit_line(test_message, #{i+1}, string)
      expect(isa.errors.include?("WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT")).to eq(true)
    end
  }
end
exit
xx = ChooChoo.test_string
ar = xx.split('~')
ChooChoo::EDI835.valid_segments.to_a.each do |seg|
  str = ar.detect {|s| s =~ /^#{seg}/}
  i = ar.index(str)
  next unless str
  str = str.gsub(/^#{seg}/, ("#{seg}" << '* '*30))
  puts %{
    it "handles WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT" do
      string = "#{str}"
      isa = edit_line(test_message, #{i+1}, string)
      expect(isa.errors.include?("WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT")).to eq(true)
    end
  }
end
xx = ChooChoo.test_string
ar = xx.split('~')
ChooChoo::EDI835.valid_segments.to_a.each do |seg|
  str = ar.detect {|s| s =~ /^#{seg}/}
  i = ar.index(str)
  next unless str
  str << ('* '*30)
  puts %{
    it "handles WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT" do
      string = "#{str}"
      isa = edit_line(test_message, #{i+1}, string)
      expect(isa.errors.include?("WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT")).to eq(true)
    end
  }
end
xx = ChooChoo.test_string
ar = xx.split('~')
ChooChoo::EDI835.valid_segments.to_a.each do |seg|
  str = ar.detect {|s| s =~ /^#{seg}/}
  i = ar.index(str)
  next unless str
  str << ('* '*30)
  puts %{
    it "handles WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT" do
      string = "#{str}"
      isa = edit_line(test_message, #{i+1}, string)
      expect(isa.errors.include?("WRONG_NUMBER_OF_ELEMENTS_FOR_#{seg}_SEGMENT")).to eq(true)
    end}
end
exit
