#!/usr/bin/env ruby
require 'fileutils'

hash = {
  ISA: 16,
  BPR: 21,
  TRN: 4,
  CUR: 21,
  DTM: 6,
  PER: 9,
  MIA: 24,
  REF: 4,
  CAS: 19,
  IEA: 2,
  QTY: 4,
  SVC: [{1 => 7}, (2..5), {6 => 8}, 7],
  CLP: 14, 
  PLB: [(1..2), {3 => 2}, 4, {5 => 2}, 6, {7 => 2}, 8, {9 => 2}, 10, {11 => 2}, 12, {13 => 2}, 14],
  TS3: 19,
  TS2: 24,
  MOA: 9,
  RDM: 3,
  LX: 1,
  LQ: 2,
  N1: 6,
  N3: 2,
  N4: 6,
  GS: 8,
  ST: 3,
  GE: 2,
  SE: 2,
  NM1: 11,
  AMT: 3
}

funcnames = []

hash.keys.each do |key|
  if hash[key].is_a?(Fixnum)
    1.upto(hash[key]) do |n|
      funcnames << "#{key}#{n.to_s.rjust(2,'0')}"
    end
  else
    hash[key].each do |item|
      if item.is_a?(Fixnum)
        funcnames << "#{key}#{item.to_s.rjust(2,'0')}"
      elsif item.is_a?(Range)
        item.each do |n|
          funcnames <<  "#{key}#{n.to_s.rjust(2,'0')}"
        end
      else
        el = item.keys.first
        cm = item.values.first
        1.upto(cm).each do |n|
          funcnames <<  "#{key}#{el.to_s.rjust(2,'0')}_#{n.to_s.rjust(2,'0')}"
        end
      end
    end
  end
end

vars = hash.keys.map {|k| "// static VALUE c#{k};"}.join("\n")

functions = funcnames.map do |funcname|
  funcname =~ /^([A-Z][A-Z][A-Z1-9]|[A-Z][A-Z]|[A-Z][1-9])([0-9]{2})(|_([0-9]{2}))$/
  segname = $1
  %{
static VALUE #{funcname.downcase}(VALUE self){
  return segmentGetPropery(self, "@#{funcname.downcase}", #{$2.to_i}, #{$4.to_i});
}
}
end.join

cdefines = hash.keys.map do |klass|
%{  VALUE c#{klass} = rb_define_class_under(mChooChoo, "#{klass}", cSegment);}
end.join("\n")

inits = funcnames.map do |funcname|
  funcname =~ /^([A-Z][A-Z][A-Z1-9]|[A-Z][A-Z]|[A-Z][1-9])([0-9]{2})(|_([0-9]{2}))$/
  segname = $1
%{  rb_define_method(c#{segname}, "#{funcname}", #{funcname.downcase}, 0);
  rb_define_method(c#{segname}, "#{funcname.downcase}", #{funcname.downcase}, 0);}
end.join("\n")

content = %{

//
//  choo_choo_segment.c
//  choo_choo
//
//  Created by Grady Griffin on 1/28/16.
//  Copyright (c) 2015 CareCloud. All rights reserved.
//

#include "choo_choo.h"

static inline VALUE segmentGetPropery(VALUE segment_rb, const char *key, short element, short component);
static void propertyFree(segment_t* segment);

static VALUE mChooChoo;
static VALUE mEDI835;
static VALUE cSegment;

#{vars}

void segmentInitializer(segment_t *segment, char *src){
  long idx = strlen(src);
  idx = idx > MAX_NAME_SIZE ? MAX_NAME_SIZE : idx;
  memset(segment->name,0,(MAX_NAME_SIZE+1)*sizeof(char));
  memcpy(segment->name,src,idx*sizeof(char));
  segment->elements = 0;
  segment->depth = 0;
  segment->children = 0;
  segment->propertyCache = st_init_numtable();
}

void addChildSegment(segment_t *parent, segment_t *child){
  if(NULL == parent->firstSegment){
    parent->firstSegment = child;
  }else{
    parent->lastSegment->tail = child;
    child->head = parent->lastSegment;
  }
  parent->children++;
  parent->lastSegment = child;
  child->parent = parent;
  child->depth = parent->depth + 1;
}

void segmentFree(segment_t *segment){
  if(NULL != segment){    
    if(segment->propertyCache){
      propertyFree(segment);
    }
    choo_chooDealloc(segment);
  }
}

segment_t *rewindLoop(segment_t *loop){
  segment_t *tmp;
  tmp = loop;
  while(NULL != tmp){
    loop = tmp;
    tmp = loop->head;
  }
  return loop;
}

static void propertyFree(segment_t* segment){
  char *ptr;
  for(short element=1;element<=segment->elements; element++){
    for(short component=0; component<100; component++){
      if((ptr = propertyLookup(segment, element, component))){
        if(strlen(ptr)) choo_chooDealloc(ptr);
      }else{
        break;
      }
    }
  }
  st_free_table(segment->propertyCache);
  segment->propertyCache = NULL;
}

static inline VALUE segmentGetPropery(VALUE segment_rb, const char *key, short element, short component){
  ID id_key = rb_intern(key);
  VALUE rtn = rb_ivar_get(segment_rb,id_key);
  anchor_t *anchor;
  char *ptr;

  if(rtn == Qnil){
    anchor = getAnchor(segment_rb);
    ptr = propertyLookup(anchor->segment, element, component);
    rtn = (ptr ? rb_ivar_set(segment_rb,id_key, rb_str_new_cstr(ptr)) : Qnil);
  }
  return rtn;
}
#{functions}
void init_choo_choo_segment(){
  mEDI835 = rb_define_module("EDI835");
  mChooChoo = rb_define_module("ChooChoo");
  cSegment = rb_define_class_under(mChooChoo, "Segment", rb_cObject);
#{cdefines}
#{inits}
}
}

file = File.open("ext/choo_choo_ext/choo_choo_segment.c", "w+")

file << content
file.close